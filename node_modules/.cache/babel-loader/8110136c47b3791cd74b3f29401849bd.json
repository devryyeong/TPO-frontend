{"ast":null,"code":"/// <reference lib=\"webworker\" />\n/* eslint-disable no-restricted-globals */ // This service worker can be customized!\n// See https://developers.google.com/web/tools/workbox/modules\n// for the list of available Workbox modules, or add any other\n// code you'd like.\n// You can also remove this file if you'd prefer not to use a\n// service worker, and the Workbox build step will be skipped.\nimport{clientsClaim}from'workbox-core';import{ExpirationPlugin}from'workbox-expiration';import{precacheAndRoute}from'workbox-precaching';import{registerRoute}from'workbox-routing';import{StaleWhileRevalidate}from'workbox-strategies';clientsClaim();// Precache all of the assets generated by your build process.\n// Their URLs are injected into the manifest variable below.\n// This variable must be present somewhere in your service worker file,\n// even if you decide not to use precaching. See https://cra.link/PWA\nprecacheAndRoute(self.__WB_MANIFEST);// Set up App Shell-style routing, so that all navigation requests\n// are fulfilled with your index.html shell. Learn more at\n// https://developers.google.com/web/fundamentals/architecture/app-shell\n// const fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\nregisterRoute(// Return false to exempt requests from being fulfilled by index.html.\nfunction(_ref){var request=_ref.request,url=_ref.url;// If this isn't a navigation, skip.\nif(request.mode!=='navigate'){return false;}// If this is a URL that starts with /_, skip.\nif(url.pathname.startsWith('/_')){return false;}// If this looks like a URL for a resource, because it contains\n// a file extension, skip.\n// if (url.pathname.match(fileExtensionRegexp)) {\n//   return false;\n// }\n// Return true to signal that we want to use the handler.\nreturn true;}// createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')\n);// An example runtime caching route for requests that aren't handled by the\n// precache, in this case same-origin .png requests like those from in public/\nregisterRoute(// Add in any other file extensions or routing criteria as needed.\nfunction(_ref2){var url=_ref2.url;return url.origin===self.location.origin&&url.pathname.endsWith('.png');},// Customize this strategy as needed, e.g., by changing to CacheFirst.\nnew StaleWhileRevalidate({cacheName:'images',plugins:[// Ensure that once this runtime cache reaches a maximum size the\n// least-recently used images are removed.\nnew ExpirationPlugin({maxEntries:50})]}));// This allows the web app to trigger skipWaiting via\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\nself.addEventListener('message',function(event){if(event.data&&event.data.type==='SKIP_WAITING'){self.skipWaiting();}});// Any other custom service worker logic can go here.","map":{"version":3,"names":["clientsClaim","ExpirationPlugin","precacheAndRoute","registerRoute","StaleWhileRevalidate","self","__WB_MANIFEST","request","url","mode","pathname","startsWith","origin","location","endsWith","cacheName","plugins","maxEntries","addEventListener","event","data","type","skipWaiting"],"sources":["C:/Users/lnr99/Documents/TPO-Client/tpo-client/src/service-worker.ts"],"sourcesContent":["/// <reference lib=\"webworker\" />\r\n/* eslint-disable no-restricted-globals */\r\n\r\n// This service worker can be customized!\r\n// See https://developers.google.com/web/tools/workbox/modules\r\n// for the list of available Workbox modules, or add any other\r\n// code you'd like.\r\n// You can also remove this file if you'd prefer not to use a\r\n// service worker, and the Workbox build step will be skipped.\r\n\r\nimport { clientsClaim } from 'workbox-core';\r\nimport { ExpirationPlugin } from 'workbox-expiration';\r\nimport { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';\r\nimport { registerRoute } from 'workbox-routing';\r\nimport { StaleWhileRevalidate } from 'workbox-strategies';\r\n\r\ndeclare const self: ServiceWorkerGlobalScope;\r\n\r\nclientsClaim();\r\n\r\n// Precache all of the assets generated by your build process.\r\n// Their URLs are injected into the manifest variable below.\r\n// This variable must be present somewhere in your service worker file,\r\n// even if you decide not to use precaching. See https://cra.link/PWA\r\n\r\nprecacheAndRoute(self.__WB_MANIFEST);\r\n\r\n// Set up App Shell-style routing, so that all navigation requests\r\n// are fulfilled with your index.html shell. Learn more at\r\n// https://developers.google.com/web/fundamentals/architecture/app-shell\r\n// const fileExtensionRegexp = new RegExp('/[^/?]+\\\\.[^/]+$');\r\n\r\nregisterRoute(\r\n  // Return false to exempt requests from being fulfilled by index.html.\r\n  ({ request, url }: { request: Request; url: URL }) => {\r\n    // If this isn't a navigation, skip.\r\n    if (request.mode !== 'navigate') {\r\n      return false;\r\n    }\r\n\r\n    // If this is a URL that starts with /_, skip.\r\n    if (url.pathname.startsWith('/_')) {\r\n      return false;\r\n    }\r\n\r\n    // If this looks like a URL for a resource, because it contains\r\n    // a file extension, skip.\r\n    // if (url.pathname.match(fileExtensionRegexp)) {\r\n    //   return false;\r\n    // }\r\n\r\n    // Return true to signal that we want to use the handler.\r\n    return true;\r\n  },\r\n  // createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')\r\n);\r\n\r\n// An example runtime caching route for requests that aren't handled by the\r\n// precache, in this case same-origin .png requests like those from in public/\r\nregisterRoute(\r\n  // Add in any other file extensions or routing criteria as needed.\r\n  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),\r\n  // Customize this strategy as needed, e.g., by changing to CacheFirst.\r\n  new StaleWhileRevalidate({\r\n    cacheName: 'images',\r\n    plugins: [\r\n      // Ensure that once this runtime cache reaches a maximum size the\r\n      // least-recently used images are removed.\r\n      new ExpirationPlugin({ maxEntries: 50 }),\r\n    ],\r\n  })\r\n);\r\n\r\n// This allows the web app to trigger skipWaiting via\r\n// registration.waiting.postMessage({type: 'SKIP_WAITING'})\r\nself.addEventListener('message', (event) => {\r\n  if (event.data && event.data.type === 'SKIP_WAITING') {\r\n    self.skipWaiting();\r\n  }\r\n});\r\n\r\n// Any other custom service worker logic can go here.\r\n"],"mappings":"AAAA;AACA,0C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA,OAASA,YAAT,KAA6B,cAA7B,CACA,OAASC,gBAAT,KAAiC,oBAAjC,CACA,OAASC,gBAAT,KAA0D,oBAA1D,CACA,OAASC,aAAT,KAA8B,iBAA9B,CACA,OAASC,oBAAT,KAAqC,oBAArC,CAIAJ,YAAY,GAEZ;AACA;AACA;AACA;AAEAE,gBAAgB,CAACG,IAAI,CAACC,aAAN,CAAhB,CAEA;AACA;AACA;AACA;AAEAH,aAAa,CACX;AACA,cAAsD,IAAnDI,QAAmD,MAAnDA,OAAmD,CAA1CC,GAA0C,MAA1CA,GAA0C,CACpD;AACA,GAAID,OAAO,CAACE,IAAR,GAAiB,UAArB,CAAiC,CAC/B,MAAO,MAAP,CACD,CAED;AACA,GAAID,GAAG,CAACE,QAAJ,CAAaC,UAAb,CAAwB,IAAxB,CAAJ,CAAmC,CACjC,MAAO,MAAP,CACD,CAED;AACA;AACA;AACA;AACA;AAEA;AACA,MAAO,KAAP,CACD,CACD;AAtBW,CAAb,CAyBA;AACA;AACAR,aAAa,CACX;AACA,mBAAGK,IAAH,OAAGA,GAAH,OAAaA,IAAG,CAACI,MAAJ,GAAeP,IAAI,CAACQ,QAAL,CAAcD,MAA7B,EAAuCJ,GAAG,CAACE,QAAJ,CAAaI,QAAb,CAAsB,MAAtB,CAApD,EAFW,CAGX;AACA,GAAIV,qBAAJ,CAAyB,CACvBW,SAAS,CAAE,QADY,CAEvBC,OAAO,CAAE,CACP;AACA;AACA,GAAIf,iBAAJ,CAAqB,CAAEgB,UAAU,CAAE,EAAd,CAArB,CAHO,CAFc,CAAzB,CAJW,CAAb,CAcA;AACA;AACAZ,IAAI,CAACa,gBAAL,CAAsB,SAAtB,CAAiC,SAACC,KAAD,CAAW,CAC1C,GAAIA,KAAK,CAACC,IAAN,EAAcD,KAAK,CAACC,IAAN,CAAWC,IAAX,GAAoB,cAAtC,CAAsD,CACpDhB,IAAI,CAACiB,WAAL,GACD,CACF,CAJD,EAMA"},"metadata":{},"sourceType":"module"}